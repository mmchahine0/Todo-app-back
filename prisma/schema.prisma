generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(cuid())
  email           String        @unique
  password        String 
  name            String?
  role            Role          @default(USER)
  suspended       Boolean       @default(false)
  isVerified      Boolean       @default(false)
  verificationCode VerificationCode?
  passwordReset   PasswordReset?
  todos           Todo[]
  dynamicPages    DynamicPage[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt @default(now())
}

model VerificationCode {
  id        String   @id @default(cuid())
  code      String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
}

model PasswordReset {
  id        String   @id @default(cuid())
  code      String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

model Todo {
  id        String    @id @default(cuid())
  title     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
  completed Boolean   @default(false)
  user      User      @relation(fields: [userId], references: [id])
  userId    String
}

model DynamicPage {
  id          String        @id @default(cuid())
  title       String
  path        String        @unique
  content     Json         
  isPublished Boolean       @default(false)
  createdBy   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  layout      String       @default("base")
  isProtected Boolean      @default(false)
  admin       Boolean      @default(false)
  pageContent PageContent[] 
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model PageContent {
  id        String      @id @default(cuid())
  type      String      
  content   Json
  page      DynamicPage @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId    String
  updatedAt DateTime    @updatedAt @default(now())

  @@unique([pageId, type])
}

model ContentSection {
  id        String    @id @default(cuid())
  type      String    @unique  
  content   Json      
  updatedAt DateTime  @updatedAt @default(now())
}